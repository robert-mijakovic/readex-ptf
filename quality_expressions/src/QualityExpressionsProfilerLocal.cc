/**
   @file    QualityExpressionsProfilerLocal.cc
   @ingroup QualityExpressionProfilerLocal
   @brief   Basic Event manager
   @author  Laurent Morin
   @verbatim
   Revision:       $Revision$
   Revision date:  $Date$
   Committed by:   $Author$

   This file is part of the Periscope performance measurement tool.
   See http://www.lrr.in.tum.de/periscope for details.

   Copyright (c) 2005-2014, Technische Universitaet Muenchen, Germany
   See the COPYING file in the base directory of the package for details.

   @endverbatim
 */

#include <stdio.h>
#include <list>
#include "quality-expressions/QualityExpressionsProfilerLocal.h"
#include "quality-expressions//QualExprSemanticLocal.h"

namespace quality_expressions_ns {
/**
   @class QualExprProfilerLocal
   @brief Internal Management of local profiling metrics.
   @ingroup QualityExpressionProfilerLocal

   This class performs the management of local profiling metrics for all other modules.
   It is in charge also of interfacing the internal management of the local quality expressions semantic and namespace.
   This class is hidden from all other modules.
 */
class QualExprProfilerLocal   // private QualExprSemaphore // LM -- Note: Use semaphores if the the atomic instrinsic is not supported for your machine.
{
public:
    typedef std::list<listen_event_func_t> listenerList_T;

public:
    /* Destructor */ ~QualExprProfilerLocal( void ) {
    }

public:
    const QualExprSemanticNamespace& registerListener( listen_event_func_t listener );

    void unregisterListener( listen_event_func_t listener );

    struct profiling_event_t* startEvent( enum qualexpr_event_local_t semantic,
                                          long long                   value );

    void stopEvent( struct profiling_event_t* eventStarted,
                    long long                 value );

    static QualExprProfilerLocal* getProfiler( void );

private:
    /* Constructor */ QualExprProfilerLocal( void ) : m_eidCursor( 0 ), m_listenerList() {
    }                                                                                                                   //!< Constructor is only available via the getProfiler() method.
    void propagateEvent( struct profiling_event_t* event );

    unsigned int                   m_eidCursor;                         //!< Atomic counter for the generation of unique event IDs.
    listenerList_T                 m_listenerList;                      //!< The list of listeners for the profiler.
    QualExprSemanticNamespaceLocal m_semanticNamespace;                 //!< The quality expression namespace built for the local profiler.
};

/** @brief Return the Profiler descriptor that must be unique application wide.
 */
QualExprProfilerLocal* QualExprProfilerLocal::getProfiler( void ) {
    static QualExprProfilerLocal* g_profiler = NULL;
    if( !g_profiler ) {
        g_profiler = new QualExprProfilerLocal();
    }
    return g_profiler;
}

/** @brief Propate an event to all listeners.
    @param currentEvent the event to propate
 */
void QualExprProfilerLocal::propagateEvent( struct profiling_event_t* currentEvent ) {
    for( listenerList_T::const_iterator ite = m_listenerList.begin(); ite != m_listenerList.end(); ite++ ) {
        ( *ite )( currentEvent );
    }
}

/** @brief Register a listener for all events generated by this profiling manager.
    @param listener the callback that will be used to propagate events to that listener.
    @return the semantic namespace for the local profiler.
 */
const QualExprSemanticNamespace& QualExprProfilerLocal::registerListener( listen_event_func_t listener ) {
    m_listenerList.push_back( listener );
    return m_semanticNamespace;
}

/** @brief Unregister an event listener.
    @param listener the callback to be removed
 */
void QualExprProfilerLocal::unregisterListener( listen_event_func_t listener ) {
    m_listenerList.remove( listener );
}

/** @brief Generate an event "start" with the given semantic.
    @param semantic the event semantic in the list of semantic available for the local profiler (@sa qualexpr_event_local_t)
    @param value the event value, meaning depending on the event semantic
    @return the event descriptor that shall be used to stop the generated event.
 */
struct profiling_event_t* QualExprProfilerLocal::startEvent( enum qualexpr_event_local_t semantic,
                                                             long long                   value ) {
    unsigned int              eid          = atomic_add<unsigned int> ( m_eidCursor, 1 );
    struct profiling_event_t  event        = { D_START, semantic, eid, value };
    struct profiling_event_t* currentEvent = ( struct profiling_event_t* )malloc( sizeof( struct profiling_event_t ) );
    *currentEvent = event;
    propagateEvent( currentEvent );
    return currentEvent;
}

/** @brief Generate an event "stop" with the given semantic.
    @param eventStarted the event descriptor generated for the associated "start" event.
    @param value the event value, meaning depending on the event semantic
 */
void QualExprProfilerLocal::stopEvent( struct profiling_event_t* eventStarted,
                                       long long                 value ) {
    struct profiling_event_t event = { D_STOP, eventStarted->m_semanticId, eventStarted->m_eid, eventStarted->m_value + value };
    *eventStarted = event;
    propagateEvent( eventStarted );
    free( eventStarted );
}

extern "C" {
semantic_namespace_t qualExpr_registerListener( listen_event_func_t listener ) {
    return ( semantic_namespace_t )&QualExprProfilerLocal::getProfiler()->registerListener( listener );
}

void qualExpr_unregisterListener( listen_event_func_t listener ) {
    QualExprProfilerLocal::getProfiler()->unregisterListener( listener );
}

struct profiling_event_t* qualExpr_startEvent( enum qualexpr_event_local_t semantic,
                                               long long                   value ) {
    return QualExprProfilerLocal::getProfiler()->startEvent( semantic, value );
}

void qualExpr_stopEvent( struct profiling_event_t* eventStarted,
                         long long                 value ) {
    QualExprProfilerLocal::getProfiler()->stopEvent( eventStarted, value );
}

void* qualExpr_startSection( void ) {
    return ( void* )QualExprProfilerLocal::getProfiler()->startEvent( QE_PROFILER_LOCAL_SectionExecution, 0 );
}

void qualExpr_stopSection( void* handler ) {
    struct profiling_event_t* eventStarted = ( struct profiling_event_t* )handler;
    QualExprProfilerLocal::getProfiler()->stopEvent( eventStarted, 0 );
}
}
}
