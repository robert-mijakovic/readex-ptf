/**
   @file    BadCodeProp.cc
   @ingroup Itanium2Properites
   @brief   Itanium2 specific property
   @verbatim
    Revision:       $Revision$
    Revision date:  $Date$
    Committed by:   $Author$

    This file is part of the Periscope Tuning Framework.
    See http://www.lrr.in.tum.de/periscope for details.

    Copyright (c) 2005-2014, Technische Universitaet Muenchen, Germany
    See the COPYING file in the base directory of the package for details.
   @endverbatim
 */

#include "BadCodeProp.h"
#include <iostream>

#include "global.h"
#include "Metric.h"
#include "Context.h"
#include "PropertyID.h"
#include <sstream>

PropertyID BadCodeProp::id() {
    return BADCODE;
}

void BadCodeProp::print() {
    std::cout << "Property:" << name() << "  Process " << context->getRank() << "  Thread " << context->getThread()
              << std::endl << "                  " << context->getRegion()->str_print() << std::endl;
}

bool BadCodeProp::condition() const {
    return r1 > threshold;
}

double BadCodeProp::confidence() const {
    return 0.1;
}

double BadCodeProp::severity() const {
    //issues=R1*theor
    //cyles/r1=best
    //cycles-best=overhead
    //cycles-cycles/R1=cycles*(1-1/R1)=overhead
    return ( ( double )cycles * ( 1 - 1 / r1 ) ) / phaseCycles * 100;
}

Context* BadCodeProp::get_phaseContext() {
    return phaseContext;
}

Gather_Required_Info_Type BadCodeProp::request_metrics() {
    pdb->request( context, PSC_ISSUES );
    pdb->request( context, PSC_THEORETICAL_ISSUE_BOUND );
    pdb->request( context, PSC_PAPI_TOT_CYC );
    pdb->request( phaseContext, PSC_PAPI_TOT_CYC );
    return ALL_INFO_GATHERED;
}

std::string BadCodeProp::name() {
    return "Inefficient code generated by compiler";
}

void BadCodeProp::evaluate() {
    issues            = pdb->get( context, PSC_ISSUES );
    theoreticalIssues = pdb->get( context, PSC_THEORETICAL_ISSUE_BOUND );
    cycles            = pdb->get( context, PSC_PAPI_TOT_CYC );
    phaseCycles       = pdb->get( phaseContext, PSC_PAPI_TOT_CYC );
    if( theoreticalIssues > 0 && issues > 0 ) {
        r1 = ( double )issues / ( double )theoreticalIssues;
    }
    else {
        r1 = -1;
    }
}

Property* BadCodeProp::clone() {
    BadCodeProp* prop = new BadCodeProp( context, phaseContext );
    return prop;
}

std::string BadCodeProp::info() {
    std::stringstream stream;

    stream << '\t' << " Ratio issue to theoretical issues: " << r1;

    return stream.str();
}
;

std::string BadCodeProp::toXMLExtra() {
    std::stringstream stream;

    stream << "\t\t<Ratio>" << r1 << "</Ratio>" << std::endl;

    return stream.str();
}
